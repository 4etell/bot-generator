version: '3.8'
services:
  nginx-proxy:
    container_name: nginx-proxy
    restart: always
    networks:
        - nginx-net
    image: jwilder/nginx-proxy:latest
    ports:
      - "8887:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
  rabbitmq:
    image: rabbitmq:3.8.22-management-alpine
    container_name: rabbitmq
    restart: always
    networks:
        - rabbitmq-net
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - ./rabbitmq-data:/var/lib/rabbitmq
  
  message-broker:
    image: 4etell/message-broker:0.0.1
    deploy:
      replicas: ${MESSAGE_BROKER_REPLICAS}
    restart: always
    networks:
        - rabbitmq-net
        - nginx-net
    environment:
        TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
        RABBITMQ_USER: ${RABBITMQ_USER}
        RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
        RABBITMQ_URI: amqp://rabbitmq:5672
        VIRTUAL_HOST: localhost
        VIRTUAL_PATH: /message-broker
        VIRTUAL_PORT: 8083
    depends_on:
      rabbitmq:
        condition: service_healthy  
        
  message-handler:
    image: 4etell/message-handler:0.0.1
    restart: always
    deploy:
      replicas: ${MESSAGE_HANDLER_REPLICAS}
    networks:
        - rabbitmq-net
    environment:
        CONFIG_SERVICE_URL: http://config-service:8089/config-service
        RABBITMQ_USER: ${RABBITMQ_USER}
        RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
        CONFIG_SERVICE_USERNAME: ${CONFIG_SERVICE_USERNAME}
        CONFIG_SERVICE_PASSWORD: ${CONFIG_SERVICE_PASSWORD}
        RABBITMQ_URI: amqp://rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy   
        
  config-service:
    image: 4etell/config-service:0.0.1
    container_name: config-service
    restart: always
    networks:
        - rabbitmq-net
        - nginx-net
        - minio-net
    environment:
        BASIC_AUTH_USERNAME: ${CONFIG_SERVICE_USERNAME}
        BASIC_AUTH_PASSWORD: ${CONFIG_SERVICE_PASSWORD}
        MINIO_ACCESS_KEY: ${MINIO_USER}
        MINIO_SECRET_KEY: ${MINIO_PASSWORD}
        MINIO_URI: http://minio:9000
        RABBITMQ_USER: ${RABBITMQ_USER}
        RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
        RABBITMQ_URI: amqp://rabbitmq:5672
        VIRTUAL_PATH: /config-service/admin
        VIRTUAL_HOST: localhost
        VIRTUAL_PORT: 8089
    depends_on:
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  minio:
    image: minio/minio
    container_name: minio
    restart: always
    networks:
        - minio-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "9000:9000"
      - "9005:9005"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
      MINIO_BROWSER: "on"
    volumes:
      - ./minio-data:/data
      - ./minio-config:/root/.minio
    command: server /data --console-address ":9005"

networks:
    nginx-net:
        driver: bridge
    rabbitmq-net:
        driver: bridge
    minio-net:
        driver: bridge

